@use "sass:meta";

@mixin button-size($padding-y, $padding-x, $border-radius, $font-size: 12px) {
  padding: $padding-y $padding-x;
  border-radius: $border-radius;

  & > .button-title {
    font-size: $font-size;
  }
}

@mixin hover($types...) {
  &:not([disabled]):hover {
    @content ('disabled');
  }
  &:hover {
    @content ('not-disabled');
  }
}

.button {
  cursor: pointer;

  background-color: #e1f5f3;
  outline: none;

  border: 2px solid #085698;

  @include hover() using ($type) {
    background-color: #6dacd0;
    @if $type == 'disabled' {
      background-color: grey;
    }
    @if $type == 'not-disabled' {
      background-color: lightgrey;
    }
  }

  &:active {
    background-color: #085698;
    > .button-title {
      color: #e1f5f3;
    }
  }

  > .button-title {
    color: #085698;
  }
}

// base mixin implementation
// .button-sm {
//   @include button-size(5px, 10px, 5px);
// }
// .button-md {
//   @include button_size(
//     $padding-y: 10px,
//     $padding-x: 20px,
//     $border-radius: 7px,
//     $font-size: 14px
//   );
// }
// .button-lg {
//   @include button-size(15px, 35px, 9px, 16px);
// }

// any number of arguments
@mixin button-type($selectors...) {
  @for $i from 0 to length($selectors) {
    #{nth($selectors, $i + 1)} {
      $mul: $i + 1;
      padding: 5px * $mul 10px * $mul;
      border-radius: 5px * $mul;

      & > .button-title {
        font-size: 12px * $mul;
      }
    }
  }
}
@include button-type('.button-sm', '.button-md', '.button-lg');

// arbitrary keyword arguments
@mixin button-types($args...) {
  @each $name, $color in meta.keywords($args) {
    .button-type-#{$name} {
      border: 2px solid $color;

      > .button-title {
        color: $color;
      }
    }
  }
}
@include button-types($success: #080, $error: #800, $info: #085698);
